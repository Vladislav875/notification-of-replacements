import asyncio
import datetime
import json
import logging
import os
import random
import pandas as pd
import requests
from vkbottle.bot import Bot

logging.basicConfig(filename='logs.log', filemode='w',
                    format='%(asctime)s | %(levelname)s: %(message)s',
                    level=logging.WARNING)

settings = json.load(open("settings.json", 'rb'))
# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫

TOKEN = settings.get("token")
api = Bot(token=TOKEN)
print(f"Load. Logging (token: {TOKEN})")
logging.info(f"–¢–æ–∫–µ–Ω –ø–æ–¥–≥—Ä—É–∂–µ–Ω. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")
myVK_ID = settings.get("peer_id")
# https://vk.com/club206974172

u1HOUR = 3600  # 1 —á–∞—Å
u1DAY = 86400  # –¥–µ–Ω—å
notFindChangesSleepDelay = u1HOUR * 4
group = settings.get("group").upper()
print(group)
lastNotification = None  # –ö–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–µ–Ω–∞—Ö

stickers = settings.get("stickers")


async def main():
    global lastNotification
    bchanges = False
    try:
        today = datetime.date.today() + datetime.timedelta(days=1)
        # print("lastNotification", lastNotification, "\ntoday", today)
        if lastNotification == today or datetime.datetime.now().hour <= 15:
            # <= 15 —á—Ç–æ –±—ã –æ–Ω —Å —Å–∞–º–æ–≥–æ —É—Ç—Ä–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª –∫–∞–∂–¥—ã–π —á–∞—Å –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω
            raise ChildProcessError
        month = today.month if len(str(today.month)) == 2 else "0" + str(today.month)
        changes = requests.get(f"http://tpcol.ru/images/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–∏_–ó–∞–º–µ–Ω—ã/{today.day}.{month}.{today.year}.xlsx")
        # http://tpcol.ru/images/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–∏_–ó–∞–º–µ–Ω—ã/26.05.2022.xlsx
        if stickers:
            await api.api.messages.send(peer_id=myVK_ID,
                                        random_id=random.randrange(999999),
                                        sticker_id=stickers[random.randrange(len(stickers))])
        await api.api.messages.send(peer_id=myVK_ID,
                                    random_id=random.randrange(999999),
                                    message=f"–ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–º–µ–Ω—ã –Ω–∞ {today.day}.{month}.{today.year} –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group}\".")
        if changes.status_code == 200 and "<!DOCTYPE html>" not in str(changes.content):  # –§–∞–π–ª –µ—Å—Ç—å
            logging.info(f"–ò—â–µ–º –∑–∞–º–µ–Ω—É –Ω–∞ {today.day}.{month}.{today.year}. –§–∞–π–ª —Å–∫–∞—á–µ–Ω")
            open(f"{today.day}.{month}.{today.year}.xlsx", "wb").write(changes.content)
            changesexcel = pd.read_excel(f'{today.day}.{month}.{today.year}.xlsx')
            for i in changesexcel.itertuples():
                try:
                    name_group_change = str(i[4]).upper()
                    if name_group_change == group:
                        bchanges = True
                        logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ {today.day}.{month}.{today.year} –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group}\".")
                        await api.api.messages.send(peer_id=myVK_ID,
                                                    random_id=random.randrange(999999),
                                                    message=f"""
üîî –ó–∞–º–µ–Ω–∞ –Ω–∞ {i[3]} –ø–∞—Ä–µ
ü§ì –ó–∞–º–µ–Ω–∞ –Ω–∞: {i[6]}
üë• –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {i[5]}
üèö –ö–∞–±–∏–Ω–µ—Ç: {i[7]} –∫–∞–±.""")
                        lastNotification = today
                except Exception as e:
                    await api.api.messages.send(peer_id=myVK_ID,
                                                random_id=random.randrange(999999),
                                                message=f"*v.nazukin(–ú–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫), –∑–∞–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—Ä–∏ "
                                                        f"–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–¥–∏ –ø—Ä–æ–≤–µ—Ä—å.\n\n{e}")
                    logging.info(f"–ó–∞–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. {e}")
            if not bchanges:
                await api.api.messages.send(peer_id=myVK_ID,
                                            random_id=random.randrange(999999),
                                            message=f"–ó–∞–º–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group}\" –Ω–µ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —è –æ—à–∏–±–∞—é—Å—å...")
                logging.info(f"–ó–∞–º–µ–Ω –Ω–∞ {today.day}.{month}.{today.year} –¥–ª—è –≥—Ä—É–ø–ø—ã \"{group}\" –Ω–µ—Ç—É.")
                lastNotification = today
        else:
            logging.info(f"–ó–∞–º–µ–Ω—ã –Ω–∞ {today.day}.{month}.{today.year} –µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏. –ü—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞")
            await api.api.messages.send(peer_id=myVK_ID,
                                        random_id=random.randrange(999999),
                                        message=f"–ó–∞–º–µ–Ω—ã –Ω–∞ {today.day}.{month}.{today.year} "
                                                f"–µ—â—ë –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏ –∏–ª–∏ –∏—Ö –Ω–µ—Ç. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞")
            await asyncio.sleep(notFindChangesSleepDelay)
            raise NotImplementedError
        try:
            os.remove(f"{today.day}.{month}.{today.year}.xlsx")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {e}")
        await asyncio.sleep(u1HOUR * 1)
        # await asyncio.sleep(10)
    except NotImplementedError:
        logging.error("–ü—Ä–æ–≤–µ—Ä—è—é –µ—â—ë —Ä–∞–∑ –Ω–∞–ª–∏—á–∏–µ –∑–∞–º–µ–Ω —Å–ø—É—Å—Ç—è 4 —á–∞—Å–∞.")
    except ChildProcessError:
        logging.error("–°–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–µ–Ω–∞—Ö –∏–ª–∏ —Å–µ–π—á–∞—Å <= 15 —á–∞—Å–æ–≤, —Å–∫–∏–ø–∞—é –Ω–∞ 1 —á–∞—Å.")
        await asyncio.sleep(u1HOUR * 1)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}.")


if __name__ == "__main__":
    while True:
        loop = asyncio.new_event_loop()
        tasks = [
            loop.create_task(main())
        ]
        loop.run_until_complete(asyncio.wait(tasks))
